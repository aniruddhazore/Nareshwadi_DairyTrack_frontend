import React, { useState, useEffect } from "react";
const apiUrl = process.env.EXPO_PUBLIC_API_URL;
import {
  StyleSheet,
  Text,
  View,
  FlatList,
  ActivityIndicator,
  TextInput,
  TouchableOpacity,
  Modal,
  Alert,
  Dimensions,
} from "react-native";
import axios from "axios";
import Icon from "react-native-vector-icons/FontAwesome";

const User = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchName, setSearchName] = useState("");
  const [selectedUser, setSelectedUser] = useState(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isAddUserModalVisible, setIsAddUserModalVisible] = useState(false);
  const [editedUser, setEditedUser] = useState({
    name: "",
    email: "",
    phone: "",
  });
  const [newUser, setNewUser] = useState({
    name: "",
    email: "",
    password: "", // This will be autogenerated, so no input required
    phone: "",
    userType: "User",
  });
  const [showPicker, setShowPicker] = useState(false);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get("http://nareshwadi-goshala.onrender.com/users", {
          params: { name: searchName },
        });
        setUsers(response.data);
        setLoading(false);
      } catch (error) {
        console.log("Error fetching users:", error);
        setLoading(false);
      }
    };
    fetchUsers();
  }, [searchName]);

  const openModal = (user) => {
    setSelectedUser(user);
    setEditedUser({
      name: user.name,
      email: user.email,
      phone: user.phone,
    });
    setIsModalVisible(true);
  };

  const closeModal = () => {
    setIsModalVisible(false);
    setSelectedUser(null);
  };

  const openAddUserModal = () => {
    setIsAddUserModalVisible(true);
  };

  const closeAddUserModal = () => {
    setIsAddUserModalVisible(false);
    setNewUser({
      name: "",
      email: "",
      password: "", // Reset password field
      phone: "",
      userType: "User",
    });
    setShowPicker(false); // Reset picker visibility
  };

  const updateUser = async (userId, updatedUser) => {
    const url = `http://nareshwadi-goshala.onrender.com/users/${userId}`;
    console.log(
      "Updating user:",
      userId,
      "with data:",
      updatedUser,
      "at URL:",
      url
    );
    try {
      await axios.put(url, updatedUser);
      const updatedUsers = users.map((user) =>
        user._id === userId ? { ...user, ...updatedUser } : user
      );
      setUsers(updatedUsers);
      Alert.alert("Success", "User updated successfully");
      closeModal();
    } catch (error) {
      console.log("Error updating user:", error);
      Alert.alert("Error", "Failed to update user");
    }
  };

  const generatePassword = () => {
    const length = 8; // Minimum length of the password
    const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz';
    const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const numbers = '0123456789';
    const allCharacters = lowerCaseLetters + upperCaseLetters + numbers;
  
    let password = '';
    let hasLower = false;
    let hasUpper = false;
    let hasNumber = false;
  
    while (password.length < length || !hasLower || !hasUpper || !hasNumber) {
      const randomIndex = Math.floor(Math.random() * allCharacters.length);
      const randomChar = allCharacters[randomIndex];
      
      password += randomChar;
      
      if (lowerCaseLetters.includes(randomChar)) hasLower = true;
      if (upperCaseLetters.includes(randomChar)) hasUpper = true;
      if (numbers.includes(randomChar)) hasNumber = true;
    }
  
    return password;
  };
  
  const handleEdit = () => {
    if (selectedUser) {
      updateUser(selectedUser._id, editedUser);
    }
  };

  const handleAddUser = async () => {
    const password = generatePassword(); // Generate a valid password
    const newUserWithPassword = { ...newUser, password };
  
    try {
      const response = await axios.post("http://nareshwadi-goshala.onrender.com/register", newUserWithPassword);
      if (response.status === 201) {
        if (response.data && response.data._id) {
          setUsers([...users, response.data]);
          Alert.alert("Success", "User added successfully");
        } else {
          console.error("Response data does not contain _id");
          Alert.alert("Error", "Failed to add user");
        }
        closeAddUserModal();
      } else {
        console.error("Failed to add user:", response.statusText);
        Alert.alert("Error", "Failed to add user");
      }
    } catch (error) {
      console.error("Error adding user:", error);
      Alert.alert("Error", "Failed to add user");
    }
  };
  

  const renderItem = ({ item }) => (
    <TouchableOpacity style={styles.userItem} onPress={() => openModal(item)}>
      <View style={styles.iconContainer}>
        <Icon name="pencil" size={20} color="#fff" />
      </View>
      <Text style={styles.userName}>{item.name}</Text>
      <Text style={styles.userStatus}>
        {item.verified ? "Verified" : "Not Verified"}
      </Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.header}>List of Users</Text>
      <TextInput
        style={styles.searchInput}
        placeholder="Search by name"
        value={searchName}
        onChangeText={(text) => setSearchName(text)}
      />
      {loading ? (
        <ActivityIndicator size="large" color="#B592FF" />
      ) : (
        <FlatList
          data={users}
          keyExtractor={(item) => item._id.toString()}  // Ensure this line is correct
          renderItem={renderItem}
          numColumns={2}
          ListEmptyComponent={
            <Text style={styles.emptyText}>No users found</Text>
          }
          contentContainerStyle={styles.listContainer}
        />
      )}
      <TouchableOpacity style={styles.addButton} onPress={openAddUserModal}>
        <Text style={styles.addButtonText}>Add User</Text>
      </TouchableOpacity>
      {selectedUser && (
        <Modal
          animationType="slide"
          transparent={true}
          visible={isModalVisible}
          onRequestClose={closeModal}
        >
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.modalHeader}>User Details</Text>
              <TextInput
                style={styles.input}
                placeholder="Name"
                value={editedUser.name}
                onChangeText={(text) =>
                  setEditedUser({ ...editedUser, name: text })
                }
              />
              <TextInput
                style={styles.input}
                placeholder="Email"
                value={editedUser.email}
                onChangeText={(text) =>
                  setEditedUser({ ...editedUser, email: text })
                }
              />
              <TextInput
                style={styles.input}
                placeholder="Phone"
                value={editedUser.phone}
                onChangeText={(text) =>
                  setEditedUser({ ...editedUser, phone: text })
                }
              />
              <TouchableOpacity style={styles.button} onPress={handleEdit}>
                <Text style={styles.buttonText}>Save</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.button} onPress={closeModal}>
                <Text style={styles.buttonText}>Close</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      )}
      {isAddUserModalVisible && (
        <Modal
          animationType="slide"
          transparent={true}
          visible={isAddUserModalVisible}
          onRequestClose={closeAddUserModal}
        >
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.modalHeader}>Add New User</Text>
              <TextInput
                style={styles.input}
                placeholder="Name"
                value={newUser.name}
                onChangeText={(text) => setNewUser({ ...newUser, name: text })}
              />
              <TextInput
                style={styles.input}
                placeholder="Email"
                value={newUser.email}
                onChangeText={(text) => setNewUser({ ...newUser, email: text })}
              />
              <TextInput
                style={styles.input}
                placeholder="Phone"
                value={newUser.phone}
                onChangeText={(text) => setNewUser({ ...newUser, phone: text })}
              />
              <TouchableOpacity
                style={styles.pickerButton}
                onPress={() => setShowPicker(!showPicker)}
              >
                <Text style={styles.pickerText}>{newUser.userType}</Text>
                <Icon name={showPicker ? "chevron-up" : "chevron-down"} size={20} />
              </TouchableOpacity>
              {showPicker && (
                <View style={styles.pickerContainer}>
                  <TouchableOpacity
                    style={styles.pickerItem}
                    onPress={() => {
                      setNewUser({ ...newUser, userType: "Superuser" });
                      setShowPicker(false);
                    }}
                  >
                    <Text style={styles.pickerItemText}>Superuser</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.pickerItem}
                    onPress={() => {
                      setNewUser({ ...newUser, userType: "Admin" });
                      setShowPicker(false);
                    }}
                  >
                    <Text style={styles.pickerItemText}>Admin</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.pickerItem}
                    onPress={() => {
                      setNewUser({ ...newUser, userType: "User" });
                      setShowPicker(false);
                    }}
                  >
                    <Text style={styles.pickerItemText}>User</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.pickerItem}
                    onPress={() => {
                      setNewUser({ ...newUser, userType: "Milkman" });
                      setShowPicker(false);
                    }}
                  >
                    <Text style={styles.pickerItemText}>Milkman</Text>
                  </TouchableOpacity>
                </View>
              )}
              <TouchableOpacity style={styles.button} onPress={handleAddUser}>
                <Text style={styles.buttonText}>Add User</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.button} onPress={closeAddUserModal}>
                <Text style={styles.buttonText}>Close</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "#f9f9f9",
  },
  header: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 16,
  },
  searchInput: {
    height: 40,
    borderColor: "#ddd",
    borderWidth: 1,
    borderRadius: 4,
    paddingHorizontal: 8,
    marginBottom: 16,
  },
  listContainer: {
    paddingBottom: 80,
  },
  userItem: {
    flex: 1,
    margin: 8,
    backgroundColor: "#B592FF",
    borderRadius: 8,
    padding: 16,
    alignItems: "center",
  },
  iconContainer: {
    backgroundColor: "#5c4f7d",
    borderRadius: 50,
    padding: 8,
    marginBottom: 8,
  },
  userName: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 4,
  },
  userStatus: {
    color: "#fff",
    fontSize: 16,
  },
  emptyText: {
    textAlign: "center",
    color: "#888",
    fontSize: 16,
    marginTop: 20,
  },
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
  },
  modalContent: {
    width: Dimensions.get("window").width - 40,
    backgroundColor: "#fff",
    borderRadius: 8,
    padding: 20,
    elevation: 5,
  },
  modalHeader: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 12,
  },
  input: {
    height: 40,
    borderColor: "#ddd",
    borderWidth: 1,
    borderRadius: 4,
    paddingHorizontal: 8,
    marginBottom: 12,
  },
  button: {
    backgroundColor: "#B592FF",
    padding: 12,
    borderRadius: 4,
    alignItems: "center",
    marginVertical: 6,
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
  },
  pickerButton: {
    padding: 12,
    borderColor: "#ddd",
    borderWidth: 1,
    borderRadius: 4,
    marginBottom: 12,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  pickerText: {
    fontSize: 16,
  },
  pickerContainer: {
    borderColor: "#ddd",
    borderWidth: 1,
    borderRadius: 4,
    overflow: "hidden",
  },
  pickerItem: {
    padding: 12,
  },
  pickerItemText: {
    fontSize: 16,
  },
  addButton: {
    backgroundColor: "#B592FF",
    padding: 12,
    borderRadius: 4,
    alignItems: "center",
    marginTop: 16,
  },
  addButtonText: {
    color: "#fff",
    fontSize: 16,
  },
});

export default User;